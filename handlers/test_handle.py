import pyjokes
import random
from aiogram import types, F, Router
import requests
from utils import get_fruits

# –°–∏–º–≤–æ–ª–∏ –ø–æ–≥–æ–¥–∏
WEATHER_SYMBOL = {
    "Unknown":             "‚ùì",
    "Clouds":              "‚òÅÔ∏è",
    "Scattered Clouds":    "‚òÅÔ∏è",
    "Drizzle":             "üåß",
    "Rain":                "üåß",
    "Thunderstorm":        "‚õà",
    "Snow":                "‚ùÑÔ∏è",
    "Mist":                "üå´",
    "Smoke":               "üå´",
    "Haze":                "üå´",
    "Dust":                "üå´",
    "Fog":                 "üå´",
    "Sand":                "üå´",
    "Ash":                 "üå´",
    "Squall":              "üå™",
    "Tornado":             "üå™",
    "Clear":               "‚òÄÔ∏è",
    "Sunny":               "‚òÄÔ∏è",
}

test_router = Router()

# –¢–µ—Å—Ç–∏
@test_router.message(F.text == 'test')
async def test(message: types.Message):
    await message.answer('test')

@test_router.message(F.text == 'anekdot')
async def anekdot(message: types.Message):
    joke = pyjokes.get_joke()
    await message.answer(joke)

@test_router.message(F.text == 'Second button')
async def rand_int(message: types.Message):
    ran = random.randint(1, 100000)
    await message.answer(str(ran))

@test_router.message(F.text == '–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó')
async def category(message: types.Message):
    if message.text == '–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó':
        await message.answer('–ó–∞—á–µ–∫–∞–π—Ç–µ –±—É–¥—å-–ª–∞—Å–∫–∞...')
        for item in get_fruits():
            card = (
                f'ID - {item["id"]}\n'
                f'–ù–∞–∑–≤–∞ —Ñ—Ä—É–∫—Ç–∞ - {item["name"]}\n'
                f'–°—ñ–º–µ–π—Å—Ç–≤–æ -  {item["family"]}\n'
                f'–ù—É—Ç—Ä–∏–µ–Ω—Ç–∏ - {item["nutritions"]}\n'
            )
            await message.answer(card)

@test_router.message(F.text == 'Coffee')
async def coffee(message: types.Message):
    api = 'https://coffee.alexflipnote.dev/random.json'
    await message.answer('–ó–∞—á–µ–∫–∞–π—Ç–µ –±—É–¥—å-–ª–∞—Å–∫–∞...')
    response = requests.get(api).json()
    card = f'Coffee : {response["file"]}'
    await message.answer(card)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏
@test_router.message(F.text == '–ü–æ–≥–æ–¥–∞')
async def weather(message: types.Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:")

@test_router.message()
async def process_weather(message: types.Message):
    city = message.text
    api_key = 'a8c0556856e69f039959bbda4588b830'
    res = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric')
    data = res.json()
    if data['cod'] == 200:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ–≥–æ–¥—É
        weather_info = (
            f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: –¥–æ–≤–≥–æ—Ç–∞ {data['coord']['lon']}, —à–∏—Ä–æ—Ç–∞ {data['coord']['lat']}\n"
            f"–ü–æ–≥–æ–¥–Ω—ñ —É–º–æ–≤–∏: {WEATHER_SYMBOL.get(data['weather'][0]['main'], '‚ùì')} {data['weather'][0]['description']}\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['main']['temp']}¬∞C\n"
            f"–í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫: {data['main']['feels_like']}¬∞C\n"
            f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['main']['temp_min']}¬∞C\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['main']['temp_max']}¬∞C\n"
            f"–¢–∏—Å–∫: {data['main']['pressure']} hPa\n"
            f"–í–æ–ª–æ–≥—ñ—Å—Ç—å: {data['main']['humidity']}%\n"
        )
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ–≥–æ–¥—É
        if 'sea_level' in data['main']:
            weather_info += f"–†—ñ–≤–µ–Ω—å –º–æ—Ä—è: {data['main']['sea_level']} hPa\n"
        if 'grnd_level' in data['main']:
            weather_info += f"–†—ñ–≤–µ–Ω—å “ë—Ä—É–Ω—Ç—É: {data['main']['grnd_level']} hPa\n"
        weather_info += (
            f"–í–∏–¥–∏–º—ñ—Å—Ç—å: {data['visibility']} –º–µ—Ç—Ä—ñ–≤\n"
            f"–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: {data['wind']['speed']} –º/—Å\n"
            f"–ù–∞–ø—Ä—è–º –≤—ñ—Ç—Ä—É: {data['wind']['deg']}¬∞\n"
        )
        if 'gust' in data['wind']:
            weather_info += f"–ü–æ—Ä–∏–≤–∏ –≤—ñ—Ç—Ä—É: {data['wind']['gust']} –º/—Å\n"
        weather_info += (
            f"–•–º–∞—Ä–Ω—ñ—Å—Ç—å: {data['clouds']['all']}%\n"
            f"–î–∞—Ç–∞ —Ç–∞ —á–∞—Å: {data['dt']}\n"
            f"–ö—Ä–∞—ó–Ω–∞: {data['sys']['country']}\n"
            f"–°—Ö—ñ–¥ —Å–æ–Ω—Ü—è: {data['sys']['sunrise']}\n"
            f"–ó–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è: {data['sys']['sunset']}\n"
            f"–ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å: {data['timezone']}\n"
            f"ID: {data['id']}\n"
            f"–ù–∞–∑–≤–∞: {data['name']}\n"
            f"–ö–æ–¥: {data['cod']}"
        )
        await message.answer(weather_info)
    else:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–≥–æ–¥—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–æ–≥–æ –º—ñ—Å—Ç–∞.")



